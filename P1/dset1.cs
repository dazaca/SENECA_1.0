//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace P1 {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dset1 : DataSet {
        
        private CONFIGDataTable tableCONFIG;
        
        private PROFESORDataTable tablePROFESOR;
        
        private G_ALUMDataTable tableG_ALUM;
        
        private DataRelation _relationG_ALUM_PROFESOR;
        
        public dset1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dset1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["CONFIG"] != null)) {
                    this.Tables.Add(new CONFIGDataTable(ds.Tables["CONFIG"]));
                }
                if ((ds.Tables["PROFESOR"] != null)) {
                    this.Tables.Add(new PROFESORDataTable(ds.Tables["PROFESOR"]));
                }
                if ((ds.Tables["G_ALUM"] != null)) {
                    this.Tables.Add(new G_ALUMDataTable(ds.Tables["G_ALUM"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONFIGDataTable CONFIG {
            get {
                return this.tableCONFIG;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PROFESORDataTable PROFESOR {
            get {
                return this.tablePROFESOR;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public G_ALUMDataTable G_ALUM {
            get {
                return this.tableG_ALUM;
            }
        }
        
        public override DataSet Clone() {
            dset1 cln = ((dset1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["CONFIG"] != null)) {
                this.Tables.Add(new CONFIGDataTable(ds.Tables["CONFIG"]));
            }
            if ((ds.Tables["PROFESOR"] != null)) {
                this.Tables.Add(new PROFESORDataTable(ds.Tables["PROFESOR"]));
            }
            if ((ds.Tables["G_ALUM"] != null)) {
                this.Tables.Add(new G_ALUMDataTable(ds.Tables["G_ALUM"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableCONFIG = ((CONFIGDataTable)(this.Tables["CONFIG"]));
            if ((this.tableCONFIG != null)) {
                this.tableCONFIG.InitVars();
            }
            this.tablePROFESOR = ((PROFESORDataTable)(this.Tables["PROFESOR"]));
            if ((this.tablePROFESOR != null)) {
                this.tablePROFESOR.InitVars();
            }
            this.tableG_ALUM = ((G_ALUMDataTable)(this.Tables["G_ALUM"]));
            if ((this.tableG_ALUM != null)) {
                this.tableG_ALUM.InitVars();
            }
            this._relationG_ALUM_PROFESOR = this.Relations["G_ALUM-PROFESOR"];
        }
        
        private void InitClass() {
            this.DataSetName = "dset1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dset1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableCONFIG = new CONFIGDataTable();
            this.Tables.Add(this.tableCONFIG);
            this.tablePROFESOR = new PROFESORDataTable();
            this.Tables.Add(this.tablePROFESOR);
            this.tableG_ALUM = new G_ALUMDataTable();
            this.Tables.Add(this.tableG_ALUM);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("G_ALUM-PROFESOR", new DataColumn[] {
                        this.tablePROFESOR.ID_PROFColumn}, new DataColumn[] {
                        this.tableG_ALUM.ID_PROFColumn});
            this.tableG_ALUM.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this._relationG_ALUM_PROFESOR = new DataRelation("G_ALUM-PROFESOR", new DataColumn[] {
                        this.tablePROFESOR.ID_PROFColumn}, new DataColumn[] {
                        this.tableG_ALUM.ID_PROFColumn}, false);
            this.Relations.Add(this._relationG_ALUM_PROFESOR);
        }
        
        private bool ShouldSerializeCONFIG() {
            return false;
        }
        
        private bool ShouldSerializePROFESOR() {
            return false;
        }
        
        private bool ShouldSerializeG_ALUM() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void CONFIGRowChangeEventHandler(object sender, CONFIGRowChangeEvent e);
        
        public delegate void PROFESORRowChangeEventHandler(object sender, PROFESORRowChangeEvent e);
        
        public delegate void G_ALUMRowChangeEventHandler(object sender, G_ALUMRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CONFIGDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnADMIN_ID;
            
            private DataColumn columnADMIN_PASS;
            
            private DataColumn columnDEPT_NOMBRE;
            
            internal CONFIGDataTable() : 
                    base("CONFIG") {
                this.InitClass();
            }
            
            internal CONFIGDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ADMIN_IDColumn {
                get {
                    return this.columnADMIN_ID;
                }
            }
            
            internal DataColumn ADMIN_PASSColumn {
                get {
                    return this.columnADMIN_PASS;
                }
            }
            
            internal DataColumn DEPT_NOMBREColumn {
                get {
                    return this.columnDEPT_NOMBRE;
                }
            }
            
            public CONFIGRow this[int index] {
                get {
                    return ((CONFIGRow)(this.Rows[index]));
                }
            }
            
            public event CONFIGRowChangeEventHandler CONFIGRowChanged;
            
            public event CONFIGRowChangeEventHandler CONFIGRowChanging;
            
            public event CONFIGRowChangeEventHandler CONFIGRowDeleted;
            
            public event CONFIGRowChangeEventHandler CONFIGRowDeleting;
            
            public void AddCONFIGRow(CONFIGRow row) {
                this.Rows.Add(row);
            }
            
            public CONFIGRow AddCONFIGRow(string ADMIN_ID, string ADMIN_PASS, string DEPT_NOMBRE) {
                CONFIGRow rowCONFIGRow = ((CONFIGRow)(this.NewRow()));
                rowCONFIGRow.ItemArray = new object[] {
                        ADMIN_ID,
                        ADMIN_PASS,
                        DEPT_NOMBRE};
                this.Rows.Add(rowCONFIGRow);
                return rowCONFIGRow;
            }
            
            public CONFIGRow FindByADMIN_ID(string ADMIN_ID) {
                return ((CONFIGRow)(this.Rows.Find(new object[] {
                            ADMIN_ID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                CONFIGDataTable cln = ((CONFIGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new CONFIGDataTable();
            }
            
            internal void InitVars() {
                this.columnADMIN_ID = this.Columns["ADMIN_ID"];
                this.columnADMIN_PASS = this.Columns["ADMIN_PASS"];
                this.columnDEPT_NOMBRE = this.Columns["DEPT_NOMBRE"];
            }
            
            private void InitClass() {
                this.columnADMIN_ID = new DataColumn("ADMIN_ID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADMIN_ID);
                this.columnADMIN_PASS = new DataColumn("ADMIN_PASS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnADMIN_PASS);
                this.columnDEPT_NOMBRE = new DataColumn("DEPT_NOMBRE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDEPT_NOMBRE);
                this.Constraints.Add(new UniqueConstraint("CONFIG_PRIMARY_KEY", new DataColumn[] {
                                this.columnADMIN_ID}, true));
                this.columnADMIN_ID.AllowDBNull = false;
                this.columnADMIN_ID.Unique = true;
            }
            
            public CONFIGRow NewCONFIGRow() {
                return ((CONFIGRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new CONFIGRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(CONFIGRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONFIGRowChanged != null)) {
                    this.CONFIGRowChanged(this, new CONFIGRowChangeEvent(((CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONFIGRowChanging != null)) {
                    this.CONFIGRowChanging(this, new CONFIGRowChangeEvent(((CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONFIGRowDeleted != null)) {
                    this.CONFIGRowDeleted(this, new CONFIGRowChangeEvent(((CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONFIGRowDeleting != null)) {
                    this.CONFIGRowDeleting(this, new CONFIGRowChangeEvent(((CONFIGRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveCONFIGRow(CONFIGRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CONFIGRow : DataRow {
            
            private CONFIGDataTable tableCONFIG;
            
            internal CONFIGRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONFIG = ((CONFIGDataTable)(this.Table));
            }
            
            public string ADMIN_ID {
                get {
                    return ((string)(this[this.tableCONFIG.ADMIN_IDColumn]));
                }
                set {
                    this[this.tableCONFIG.ADMIN_IDColumn] = value;
                }
            }
            
            public string ADMIN_PASS {
                get {
                    try {
                        return ((string)(this[this.tableCONFIG.ADMIN_PASSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONFIG.ADMIN_PASSColumn] = value;
                }
            }
            
            public string DEPT_NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tableCONFIG.DEPT_NOMBREColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONFIG.DEPT_NOMBREColumn] = value;
                }
            }
            
            public bool IsADMIN_PASSNull() {
                return this.IsNull(this.tableCONFIG.ADMIN_PASSColumn);
            }
            
            public void SetADMIN_PASSNull() {
                this[this.tableCONFIG.ADMIN_PASSColumn] = System.Convert.DBNull;
            }
            
            public bool IsDEPT_NOMBRENull() {
                return this.IsNull(this.tableCONFIG.DEPT_NOMBREColumn);
            }
            
            public void SetDEPT_NOMBRENull() {
                this[this.tableCONFIG.DEPT_NOMBREColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class CONFIGRowChangeEvent : EventArgs {
            
            private CONFIGRow eventRow;
            
            private DataRowAction eventAction;
            
            public CONFIGRowChangeEvent(CONFIGRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public CONFIGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PROFESORDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID_PROF;
            
            private DataColumn columnFOTOGRAFIA;
            
            private DataColumn columnDNI;
            
            private DataColumn columnAPELLIDOS;
            
            private DataColumn columnNOMBRE;
            
            private DataColumn columnFIJO;
            
            private DataColumn columnMOVIL;
            
            private DataColumn columnEMAIL;
            
            private DataColumn columnPASSWORD;
            
            internal PROFESORDataTable() : 
                    base("PROFESOR") {
                this.InitClass();
            }
            
            internal PROFESORDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ID_PROFColumn {
                get {
                    return this.columnID_PROF;
                }
            }
            
            internal DataColumn FOTOGRAFIAColumn {
                get {
                    return this.columnFOTOGRAFIA;
                }
            }
            
            internal DataColumn DNIColumn {
                get {
                    return this.columnDNI;
                }
            }
            
            internal DataColumn APELLIDOSColumn {
                get {
                    return this.columnAPELLIDOS;
                }
            }
            
            internal DataColumn NOMBREColumn {
                get {
                    return this.columnNOMBRE;
                }
            }
            
            internal DataColumn FIJOColumn {
                get {
                    return this.columnFIJO;
                }
            }
            
            internal DataColumn MOVILColumn {
                get {
                    return this.columnMOVIL;
                }
            }
            
            internal DataColumn EMAILColumn {
                get {
                    return this.columnEMAIL;
                }
            }
            
            internal DataColumn PASSWORDColumn {
                get {
                    return this.columnPASSWORD;
                }
            }
            
            public PROFESORRow this[int index] {
                get {
                    return ((PROFESORRow)(this.Rows[index]));
                }
            }
            
            public event PROFESORRowChangeEventHandler PROFESORRowChanged;
            
            public event PROFESORRowChangeEventHandler PROFESORRowChanging;
            
            public event PROFESORRowChangeEventHandler PROFESORRowDeleted;
            
            public event PROFESORRowChangeEventHandler PROFESORRowDeleting;
            
            public void AddPROFESORRow(PROFESORRow row) {
                this.Rows.Add(row);
            }
            
            public PROFESORRow AddPROFESORRow(string ID_PROF, System.SByte FOTOGRAFIA, string DNI, string APELLIDOS, string NOMBRE, string FIJO, string MOVIL, string EMAIL, string PASSWORD) {
                PROFESORRow rowPROFESORRow = ((PROFESORRow)(this.NewRow()));
                rowPROFESORRow.ItemArray = new object[] {
                        ID_PROF,
                        FOTOGRAFIA,
                        DNI,
                        APELLIDOS,
                        NOMBRE,
                        FIJO,
                        MOVIL,
                        EMAIL,
                        PASSWORD};
                this.Rows.Add(rowPROFESORRow);
                return rowPROFESORRow;
            }
            
            public PROFESORRow FindByID_PROF(string ID_PROF) {
                return ((PROFESORRow)(this.Rows.Find(new object[] {
                            ID_PROF})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                PROFESORDataTable cln = ((PROFESORDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new PROFESORDataTable();
            }
            
            internal void InitVars() {
                this.columnID_PROF = this.Columns["ID_PROF"];
                this.columnFOTOGRAFIA = this.Columns["FOTOGRAFIA"];
                this.columnDNI = this.Columns["DNI"];
                this.columnAPELLIDOS = this.Columns["APELLIDOS"];
                this.columnNOMBRE = this.Columns["NOMBRE"];
                this.columnFIJO = this.Columns["FIJO"];
                this.columnMOVIL = this.Columns["MOVIL"];
                this.columnEMAIL = this.Columns["EMAIL"];
                this.columnPASSWORD = this.Columns["PASSWORD"];
            }
            
            private void InitClass() {
                this.columnID_PROF = new DataColumn("ID_PROF", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID_PROF);
                this.columnFOTOGRAFIA = new DataColumn("FOTOGRAFIA", typeof(System.SByte), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFOTOGRAFIA);
                this.columnDNI = new DataColumn("DNI", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDNI);
                this.columnAPELLIDOS = new DataColumn("APELLIDOS", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAPELLIDOS);
                this.columnNOMBRE = new DataColumn("NOMBRE", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnNOMBRE);
                this.columnFIJO = new DataColumn("FIJO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFIJO);
                this.columnMOVIL = new DataColumn("MOVIL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMOVIL);
                this.columnEMAIL = new DataColumn("EMAIL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEMAIL);
                this.columnPASSWORD = new DataColumn("PASSWORD", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPASSWORD);
                this.Constraints.Add(new UniqueConstraint("PK_PROF", new DataColumn[] {
                                this.columnID_PROF}, true));
                this.columnID_PROF.AllowDBNull = false;
                this.columnID_PROF.Unique = true;
                this.columnFOTOGRAFIA.AllowDBNull = false;
            }
            
            public PROFESORRow NewPROFESORRow() {
                return ((PROFESORRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new PROFESORRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(PROFESORRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PROFESORRowChanged != null)) {
                    this.PROFESORRowChanged(this, new PROFESORRowChangeEvent(((PROFESORRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PROFESORRowChanging != null)) {
                    this.PROFESORRowChanging(this, new PROFESORRowChangeEvent(((PROFESORRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PROFESORRowDeleted != null)) {
                    this.PROFESORRowDeleted(this, new PROFESORRowChangeEvent(((PROFESORRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PROFESORRowDeleting != null)) {
                    this.PROFESORRowDeleting(this, new PROFESORRowChangeEvent(((PROFESORRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovePROFESORRow(PROFESORRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PROFESORRow : DataRow {
            
            private PROFESORDataTable tablePROFESOR;
            
            internal PROFESORRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablePROFESOR = ((PROFESORDataTable)(this.Table));
            }
            
            public string ID_PROF {
                get {
                    return ((string)(this[this.tablePROFESOR.ID_PROFColumn]));
                }
                set {
                    this[this.tablePROFESOR.ID_PROFColumn] = value;
                }
            }
            
            public System.SByte FOTOGRAFIA {
                get {
                    return ((System.SByte)(this[this.tablePROFESOR.FOTOGRAFIAColumn]));
                }
                set {
                    this[this.tablePROFESOR.FOTOGRAFIAColumn] = value;
                }
            }
            
            public string DNI {
                get {
                    try {
                        return ((string)(this[this.tablePROFESOR.DNIColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROFESOR.DNIColumn] = value;
                }
            }
            
            public string APELLIDOS {
                get {
                    try {
                        return ((string)(this[this.tablePROFESOR.APELLIDOSColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROFESOR.APELLIDOSColumn] = value;
                }
            }
            
            public string NOMBRE {
                get {
                    try {
                        return ((string)(this[this.tablePROFESOR.NOMBREColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROFESOR.NOMBREColumn] = value;
                }
            }
            
            public string FIJO {
                get {
                    try {
                        return ((string)(this[this.tablePROFESOR.FIJOColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROFESOR.FIJOColumn] = value;
                }
            }
            
            public string MOVIL {
                get {
                    try {
                        return ((string)(this[this.tablePROFESOR.MOVILColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROFESOR.MOVILColumn] = value;
                }
            }
            
            public string EMAIL {
                get {
                    try {
                        return ((string)(this[this.tablePROFESOR.EMAILColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROFESOR.EMAILColumn] = value;
                }
            }
            
            public string PASSWORD {
                get {
                    try {
                        return ((string)(this[this.tablePROFESOR.PASSWORDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tablePROFESOR.PASSWORDColumn] = value;
                }
            }
            
            public bool IsDNINull() {
                return this.IsNull(this.tablePROFESOR.DNIColumn);
            }
            
            public void SetDNINull() {
                this[this.tablePROFESOR.DNIColumn] = System.Convert.DBNull;
            }
            
            public bool IsAPELLIDOSNull() {
                return this.IsNull(this.tablePROFESOR.APELLIDOSColumn);
            }
            
            public void SetAPELLIDOSNull() {
                this[this.tablePROFESOR.APELLIDOSColumn] = System.Convert.DBNull;
            }
            
            public bool IsNOMBRENull() {
                return this.IsNull(this.tablePROFESOR.NOMBREColumn);
            }
            
            public void SetNOMBRENull() {
                this[this.tablePROFESOR.NOMBREColumn] = System.Convert.DBNull;
            }
            
            public bool IsFIJONull() {
                return this.IsNull(this.tablePROFESOR.FIJOColumn);
            }
            
            public void SetFIJONull() {
                this[this.tablePROFESOR.FIJOColumn] = System.Convert.DBNull;
            }
            
            public bool IsMOVILNull() {
                return this.IsNull(this.tablePROFESOR.MOVILColumn);
            }
            
            public void SetMOVILNull() {
                this[this.tablePROFESOR.MOVILColumn] = System.Convert.DBNull;
            }
            
            public bool IsEMAILNull() {
                return this.IsNull(this.tablePROFESOR.EMAILColumn);
            }
            
            public void SetEMAILNull() {
                this[this.tablePROFESOR.EMAILColumn] = System.Convert.DBNull;
            }
            
            public bool IsPASSWORDNull() {
                return this.IsNull(this.tablePROFESOR.PASSWORDColumn);
            }
            
            public void SetPASSWORDNull() {
                this[this.tablePROFESOR.PASSWORDColumn] = System.Convert.DBNull;
            }
            
            public G_ALUMRow[] GetG_ALUMRows() {
                return ((G_ALUMRow[])(this.GetChildRows(this.Table.ChildRelations["G_ALUM-PROFESOR"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class PROFESORRowChangeEvent : EventArgs {
            
            private PROFESORRow eventRow;
            
            private DataRowAction eventAction;
            
            public PROFESORRowChangeEvent(PROFESORRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public PROFESORRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class G_ALUMDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnID_PROF;
            
            private DataColumn columnID_GRUPO;
            
            private DataColumn columnMATERIA;
            
            private DataColumn columnTUTORIA;
            
            internal G_ALUMDataTable() : 
                    base("G_ALUM") {
                this.InitClass();
            }
            
            internal G_ALUMDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ID_PROFColumn {
                get {
                    return this.columnID_PROF;
                }
            }
            
            internal DataColumn ID_GRUPOColumn {
                get {
                    return this.columnID_GRUPO;
                }
            }
            
            internal DataColumn MATERIAColumn {
                get {
                    return this.columnMATERIA;
                }
            }
            
            internal DataColumn TUTORIAColumn {
                get {
                    return this.columnTUTORIA;
                }
            }
            
            public G_ALUMRow this[int index] {
                get {
                    return ((G_ALUMRow)(this.Rows[index]));
                }
            }
            
            public event G_ALUMRowChangeEventHandler G_ALUMRowChanged;
            
            public event G_ALUMRowChangeEventHandler G_ALUMRowChanging;
            
            public event G_ALUMRowChangeEventHandler G_ALUMRowDeleted;
            
            public event G_ALUMRowChangeEventHandler G_ALUMRowDeleting;
            
            public void AddG_ALUMRow(G_ALUMRow row) {
                this.Rows.Add(row);
            }
            
            public G_ALUMRow AddG_ALUMRow(PROFESORRow _parentPROFESORRowByG_ALUM_PROFESOR, string ID_GRUPO, string MATERIA, int TUTORIA) {
                G_ALUMRow rowG_ALUMRow = ((G_ALUMRow)(this.NewRow()));
                rowG_ALUMRow.ItemArray = new object[] {
                        _parentPROFESORRowByG_ALUM_PROFESOR[0],
                        ID_GRUPO,
                        MATERIA,
                        TUTORIA};
                this.Rows.Add(rowG_ALUMRow);
                return rowG_ALUMRow;
            }
            
            public G_ALUMRow FindByID_PROFID_GRUPOMATERIA(string ID_PROF, string ID_GRUPO, string MATERIA) {
                return ((G_ALUMRow)(this.Rows.Find(new object[] {
                            ID_PROF,
                            ID_GRUPO,
                            MATERIA})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                G_ALUMDataTable cln = ((G_ALUMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new G_ALUMDataTable();
            }
            
            internal void InitVars() {
                this.columnID_PROF = this.Columns["ID_PROF"];
                this.columnID_GRUPO = this.Columns["ID_GRUPO"];
                this.columnMATERIA = this.Columns["MATERIA"];
                this.columnTUTORIA = this.Columns["TUTORIA"];
            }
            
            private void InitClass() {
                this.columnID_PROF = new DataColumn("ID_PROF", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID_PROF);
                this.columnID_GRUPO = new DataColumn("ID_GRUPO", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnID_GRUPO);
                this.columnMATERIA = new DataColumn("MATERIA", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMATERIA);
                this.columnTUTORIA = new DataColumn("TUTORIA", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTUTORIA);
                this.Constraints.Add(new UniqueConstraint("PK_G_ALUM", new DataColumn[] {
                                this.columnID_PROF,
                                this.columnID_GRUPO,
                                this.columnMATERIA}, true));
                this.columnID_PROF.AllowDBNull = false;
                this.columnID_GRUPO.AllowDBNull = false;
                this.columnMATERIA.AllowDBNull = false;
            }
            
            public G_ALUMRow NewG_ALUMRow() {
                return ((G_ALUMRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new G_ALUMRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(G_ALUMRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.G_ALUMRowChanged != null)) {
                    this.G_ALUMRowChanged(this, new G_ALUMRowChangeEvent(((G_ALUMRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.G_ALUMRowChanging != null)) {
                    this.G_ALUMRowChanging(this, new G_ALUMRowChangeEvent(((G_ALUMRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.G_ALUMRowDeleted != null)) {
                    this.G_ALUMRowDeleted(this, new G_ALUMRowChangeEvent(((G_ALUMRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.G_ALUMRowDeleting != null)) {
                    this.G_ALUMRowDeleting(this, new G_ALUMRowChangeEvent(((G_ALUMRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveG_ALUMRow(G_ALUMRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class G_ALUMRow : DataRow {
            
            private G_ALUMDataTable tableG_ALUM;
            
            internal G_ALUMRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableG_ALUM = ((G_ALUMDataTable)(this.Table));
            }
            
            public string ID_PROF {
                get {
                    return ((string)(this[this.tableG_ALUM.ID_PROFColumn]));
                }
                set {
                    this[this.tableG_ALUM.ID_PROFColumn] = value;
                }
            }
            
            public string ID_GRUPO {
                get {
                    return ((string)(this[this.tableG_ALUM.ID_GRUPOColumn]));
                }
                set {
                    this[this.tableG_ALUM.ID_GRUPOColumn] = value;
                }
            }
            
            public string MATERIA {
                get {
                    return ((string)(this[this.tableG_ALUM.MATERIAColumn]));
                }
                set {
                    this[this.tableG_ALUM.MATERIAColumn] = value;
                }
            }
            
            public int TUTORIA {
                get {
                    try {
                        return ((int)(this[this.tableG_ALUM.TUTORIAColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("No se puede obtener el valor porque es DBNull.", e);
                    }
                }
                set {
                    this[this.tableG_ALUM.TUTORIAColumn] = value;
                }
            }
            
            public PROFESORRow PROFESORRow {
                get {
                    return ((PROFESORRow)(this.GetParentRow(this.Table.ParentRelations["G_ALUM-PROFESOR"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["G_ALUM-PROFESOR"]);
                }
            }
            
            public bool IsTUTORIANull() {
                return this.IsNull(this.tableG_ALUM.TUTORIAColumn);
            }
            
            public void SetTUTORIANull() {
                this[this.tableG_ALUM.TUTORIAColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class G_ALUMRowChangeEvent : EventArgs {
            
            private G_ALUMRow eventRow;
            
            private DataRowAction eventAction;
            
            public G_ALUMRowChangeEvent(G_ALUMRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public G_ALUMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
